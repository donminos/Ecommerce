<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:security="http://www.springframework.org/schema/security"
        xsi:schemaLocation="http://www.springframework.org/schema/beans 
      http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
   http://www.springframework.org/schema/security 
   http://www.springframework.org/schema/security/spring-security-4.0.xsd">
 
    <!-- enable support for Expression-based annotations in Spring Security secured-annotations="enabled"  -->
    <security:global-method-security pre-post-annotations="enabled" secured-annotations="enabled" />
     
    <!--
    <security:http auto-config="true" use-expressions="true" access-denied-page="/accessdenied" >
         
        <security:form-login />
  
        <security:logout />
  
    </security:http>
    -->
     
    <security:http realm="Application Realm" auto-config="true" use-expressions="false">
        <security:csrf disabled="false"/>
        <security:intercept-url pattern="/user/**" access="ROLE_USER"/>
        <security:form-login login-page="/index.jsp" default-target-url="/private/"
                             authentication-failure-url="/error.html" />
        <security:logout logout-success-url="/logout" delete-cookies="JSESSIONID" invalidate-session="true"/>
    </security:http>
    
    <!-- Declare an authentication-manager to use a custom userDetailsService -->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="userDetailsService">
            <security:password-encoder hash="sha-256">
                <!--<security:salt-source user-property="username"/>-->
            </security:password-encoder>
        </security:authentication-provider>
    </security:authentication-manager>
  
    <!-- Use a Md5 encoder since the user's passwords are stored as Md5 in the database 
    <bean class="org.springframework.security.authentication.encoding.ShaPasswordEncoder" id="passwordEncoder"/>-->
    
    <bean class="com.newinit.servicios.UsuarioServiceSecurity" id="userDetailsService"/>
    
    <!-- An in-memory list of users. No need to access an external database layer.
    See Spring Security 3.1 Reference 5.2.1 In-Memory Authentication -->
    <!-- john's password is admin, while jane;s password is user  -->
    <!--<security:user-service id="userDetailsService">
        <security:user name="admin" password="40bd001563085fc35165329ea1ff5c5ecbdbbeef" authorities="ROLE_USER, ROLE_ADMIN" />
        <security:user name="user" password="40bd001563085fc35165329ea1ff5c5ecbdbbeef" authorities="ROLE_USER" />
    </security:user-service>-->
     

</beans>
